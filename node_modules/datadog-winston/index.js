"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Transport = require('winston-transport');

var querystring = require('querystring');

var fetch = require('node-fetch');
/**
 * Class for sending logging information to Datadog's HTTPS intakes
 * @extends Transport
 */


module.exports =
/*#__PURE__*/
function (_Transport) {
  (0, _inherits2["default"])(DatadogTransport, _Transport);

  /**
   * Constructor for the Datadog Transport responsible for making
   * HTTP requests whenever log messages are received
   * @param {!Object} opts Transport options
   * @param {string} opts.apiKey The Datadog API key
   * @param {string} [intakeRegion] The intake region to be used
   */
  function DatadogTransport() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, DatadogTransport);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DatadogTransport).call(this, opts));

    if (!opts.apiKey) {
      throw new Error('Missing required option: `apiKey`');
    }

    _this.opts = opts;

    if (_this.opts.intakeRegion === 'eu') {
      _this.api = "https://http-intake.logs.datadoghq.eu/v1/input/".concat(opts.apiKey);
    } else if (_this.opts.intakeRegion === 'us3') {
      _this.api = "https://http-intake.logs.us3.datadoghq.com/v1/input/".concat(opts.apiKey);
    } else if (_this.opts.intakeRegion === 'us5') {
      _this.api = "https://http-intake.logs.us5.datadoghq.com/v1/input/".concat(opts.apiKey);
    } else {
      _this.api = "https://http-intake.logs.datadoghq.com/v1/input/".concat(opts.apiKey);
    }

    return _this;
  }
  /**
   * Expose the name of the Transport
   */


  (0, _createClass2["default"])(DatadogTransport, [{
    key: "log",

    /**
     * Core logging method exposed to Winston
     * @param {!Object} info Information to be logged
     * @param {function} callback Continuation to respond when complete
     */
    value: function () {
      var _log = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(info, callback) {
        var _this2 = this;

        var query, ddtags, logs, append, queryString, api;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setImmediate(function () {
                  _this2.emit('logged', info);
                });
                query = ['service', 'ddsource', 'ddtags', 'hostname'].reduce(function (a, b) {
                  if (_this2.opts.hasOwnProperty(b)) {
                    a[b] = _this2.opts[b];
                  }

                  return a;
                }, {});
                ddtags = info.ddtags, logs = (0, _objectWithoutProperties2["default"])(info, ["ddtags"]);

                append = function append(string) {
                  if (query.ddtags) {
                    query.ddtags += ",".concat(string);
                  } else {
                    query.ddtags = string;
                  }
                };

                info.dd && append("trace_id:".concat(info.dd.trace_id, ",span_id:").concat(info.dd.span_id));
                ddtags && append(ddtags);
                queryString = querystring.encode(query);
                api = querystring ? "".concat(this.api, "?").concat(queryString) : this.api;
                _context.prev = 8;
                _context.next = 11;
                return fetch(api, {
                  method: 'POST',
                  headers: {
                    'content-type': 'application/json'
                  },
                  body: JSON.stringify(logs)
                });

              case 11:
                _context.next = 15;
                break;

              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](8);

              case 15:
                _context.prev = 15;
                callback();
                return _context.finish(15);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[8, 13, 15, 18]]);
      }));

      function log(_x, _x2) {
        return _log.apply(this, arguments);
      }

      return log;
    }()
  }, {
    key: "name",
    get: function get() {
      return 'datadog';
    }
  }]);
  return DatadogTransport;
}(Transport);